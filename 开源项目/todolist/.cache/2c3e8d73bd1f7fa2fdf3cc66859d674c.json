{"dependencies":[],"generated":{"js":"/*\r\n* @Author: 28906\r\n* @Date:   2017-12-01 15:23:54\r\n* @Last Modified by:   28906\r\n* @Last Modified time: 2018-01-06 00:33:22\r\n* @Description: service-worker\r\n*/\n\n\"use strict\";\n\nvar cacheName = 'douban-movie-v1'; // 缓存的名字\n\n\n// service-worker下载、注册、激活之后，install事件就可以被监听了。\n// 如其名，install，表示页面上的js,css,img等都可以被缓存的时机成熟了。\n// 这些数据都是静态的，也就是不会变的，比如本demo中引入的 svg, main.js, style.css 等\n// 每次进来都会加载的静态的，不会变化的数据，我们把它缓存起来，\n// 它们就像是这个demo app的外壳一样，缓存起来的好处就是没有网络的时候打开app，这个壳至少会\n// 显示出来，从而增加用户体验。当然第一次还是相对很慢的，以后的重复访问都是从缓存拿出来，就很快了。\n// self.addEventListener('install', function(event){\n// \tevent.waitUntil( //waitUntil表示等到资源加载好，service-worker激活\n// \t\tcaches.open(cacheName)\n// \t\t.then(function(cache){ // 把外壳需要的不变的资源缓存起来\n// \t\t\tcache.addAll([\n// \t\t\t\t'./main.js',\n// \t\t\t\t'./movie.svg',\n// \t\t\t\t'./style.css',\n// \t\t\t\t'./movies.json',\n// \t\t\t\t'./douban_movie.html'\n// \t\t\t])\n// \t\t})\n// \t)\n// })\n\n\n// 现在升级一下上面的代码。使得其支持自动的更新service-worker。\n// 安装阶段跳过等待，直接进入 active\nself.addEventListener('install', function (event) {\n  event.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', function (event) {\n  event.waitUntil(Promise.all([\n\n  // 更新客户端\n  self.clients.claim(),\n\n  // 清理旧版本\n  caches.keys().then(function (cacheList) {\n    return Promise.all(cacheList.map(function (cn) {\n      if (cn !== cacheName) {\n        return caches.delete(cn);\n      }\n    }));\n  })]));\n});\n\n// 当页面有了新的资源的时候，我们也要缓存起来。\n// 这个时候就不能上边那样用了，因为是动态的，比如一个新闻网站 懂球帝 之类的\n// 它的新闻是在不断的更新的，也就是打开页面额时候会去请求新的数据。\n// 这个时候我们监听请求 fetch 事件，缓存请求的数据，下一次同一请求就从缓存中返回了。\nself.addEventListener('fetch', function (event) {\n  // 我们作为一个代理，劫持请求，判断缓存有没有请求的数据，有就从缓存返回，\n  // 没有就正常去访问服务器响应的数据，然后缓存起来，再返回。\n  // 这也是respondWith的意思\n\n  // 如果要具体的拦截到特定的路径的请求，可以使用正则\n  // if(/\\.jpg$/.test(event.request.url)){\n  // \tevent.respondWith(\n  // \t\tnew Response('<p>This is a response that comes from your service worker!</p>', {\n  // \t        headers: { 'Content-Type': 'text/html' }                                         ❸\n  // \t    });\n  // \t)\n  // }\n  event.respondWith(\n  // caches.match判断缓存里面有没有对应的数据\n  // ignoreSearch 忽略查询字符串\n  caches.match(event.request, { ignoreSearch: true }).then(function (response) {\n    if (response) {\n      return response; //缓存有，就直接返回\n    }\n\n    //如果缓存没有，我们就要去发起请求获取数据，再缓存起来\n    // 记住，请求和响应都是流，只能用一次，所以都要clone一次。\n    var fetchRequest = event.request.clone();\n    return fetch(fetchRequest).then(function (response) {\n      if (!response || response.status !== 200) {\n        return response; // 绝不缓存错误的\n      }\n\n      var responseToCache = response.clone();\n      // 把获得到数据缓存，下一次同一请求就从缓存拿数据了\n      caches.open(cacheName).then(function (cache) {\n        cache.put(fetchRequest, responseToCache);\n      });\n\n      return response;\n    });\n  }).catch(function () {\n    // 设置一个失败的回退。\n    return caches.match('./douban_movie.html');\n  }));\n});\n// 这只是一个基础的demo，用以揭示 PWA 应用中缓存的实现。\n// 缓存成功与否可以在 chrome F12 中找到 Cache下的 Cache Storage 查看。\n// 你刷新页面也会发现速度更加快了。"},"hash":"3a02ea4056728385185a43ed30ad7ab6"}